// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/aporeto-inc/manipulate (interfaces: Manipulator,TransactionalManipulator,EventManipulator)
// nolint
package mock_manipulate

import (
	elemental "github.com/aporeto-inc/elemental"
	manipulate "github.com/aporeto-inc/manipulate"
	gomock "github.com/golang/mock/gomock"
)

// MockManipulator is a mock of Manipulator interface
type MockManipulator struct {
	ctrl     *gomock.Controller
	recorder *MockManipulatorMockRecorder
}

// MockManipulatorMockRecorder is the mock recorder for MockManipulator
type MockManipulatorMockRecorder struct {
	mock *MockManipulator
}

// NewMockManipulator creates a new mock instance
func NewMockManipulator(ctrl *gomock.Controller) *MockManipulator {
	mock := &MockManipulator{ctrl: ctrl}
	mock.recorder = &MockManipulatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockManipulator) EXPECT() *MockManipulatorMockRecorder {
	return _m.recorder
}

// Count mocks base method
func (_m *MockManipulator) Count(_param0 *manipulate.Context, _param1 elemental.Identity) (int, error) {
	ret := _m.ctrl.Call(_m, "Count", _param0, _param1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count
func (_mr *MockManipulatorMockRecorder) Count(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Count", arg0, arg1)
}

// Create mocks base method
func (_m *MockManipulator) Create(_param0 *manipulate.Context, _param1 ...elemental.Identifiable) error {
	_s := []interface{}{_param0}
	for _, _x := range _param1 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Create", _s...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (_mr *MockManipulatorMockRecorder) Create(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0}, arg1...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Create", _s...)
}

// Delete mocks base method
func (_m *MockManipulator) Delete(_param0 *manipulate.Context, _param1 ...elemental.Identifiable) error {
	_s := []interface{}{_param0}
	for _, _x := range _param1 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Delete", _s...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (_mr *MockManipulatorMockRecorder) Delete(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0}, arg1...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Delete", _s...)
}

// DeleteMany mocks base method
func (_m *MockManipulator) DeleteMany(_param0 *manipulate.Context, _param1 elemental.Identity) error {
	ret := _m.ctrl.Call(_m, "DeleteMany", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMany indicates an expected call of DeleteMany
func (_mr *MockManipulatorMockRecorder) DeleteMany(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteMany", arg0, arg1)
}

// Increment mocks base method
func (_m *MockManipulator) Increment(_param0 *manipulate.Context, _param1 elemental.Identity, _param2 string, _param3 int) error {
	ret := _m.ctrl.Call(_m, "Increment", _param0, _param1, _param2, _param3)
	ret0, _ := ret[0].(error)
	return ret0
}

// Increment indicates an expected call of Increment
func (_mr *MockManipulatorMockRecorder) Increment(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Increment", arg0, arg1, arg2, arg3)
}

// Retrieve mocks base method
func (_m *MockManipulator) Retrieve(_param0 *manipulate.Context, _param1 ...elemental.Identifiable) error {
	_s := []interface{}{_param0}
	for _, _x := range _param1 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Retrieve", _s...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Retrieve indicates an expected call of Retrieve
func (_mr *MockManipulatorMockRecorder) Retrieve(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0}, arg1...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Retrieve", _s...)
}

// RetrieveMany mocks base method
func (_m *MockManipulator) RetrieveMany(_param0 *manipulate.Context, _param1 elemental.ContentIdentifiable) error {
	ret := _m.ctrl.Call(_m, "RetrieveMany", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RetrieveMany indicates an expected call of RetrieveMany
func (_mr *MockManipulatorMockRecorder) RetrieveMany(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RetrieveMany", arg0, arg1)
}

// Update mocks base method
func (_m *MockManipulator) Update(_param0 *manipulate.Context, _param1 ...elemental.Identifiable) error {
	_s := []interface{}{_param0}
	for _, _x := range _param1 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Update", _s...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (_mr *MockManipulatorMockRecorder) Update(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0}, arg1...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Update", _s...)
}

// MockTransactionalManipulator is a mock of TransactionalManipulator interface
type MockTransactionalManipulator struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionalManipulatorMockRecorder
}

// MockTransactionalManipulatorMockRecorder is the mock recorder for MockTransactionalManipulator
type MockTransactionalManipulatorMockRecorder struct {
	mock *MockTransactionalManipulator
}

// NewMockTransactionalManipulator creates a new mock instance
func NewMockTransactionalManipulator(ctrl *gomock.Controller) *MockTransactionalManipulator {
	mock := &MockTransactionalManipulator{ctrl: ctrl}
	mock.recorder = &MockTransactionalManipulatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockTransactionalManipulator) EXPECT() *MockTransactionalManipulatorMockRecorder {
	return _m.recorder
}

// Abort mocks base method
func (_m *MockTransactionalManipulator) Abort(_param0 manipulate.TransactionID) bool {
	ret := _m.ctrl.Call(_m, "Abort", _param0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Abort indicates an expected call of Abort
func (_mr *MockTransactionalManipulatorMockRecorder) Abort(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Abort", arg0)
}

// Commit mocks base method
func (_m *MockTransactionalManipulator) Commit(_param0 manipulate.TransactionID) error {
	ret := _m.ctrl.Call(_m, "Commit", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit
func (_mr *MockTransactionalManipulatorMockRecorder) Commit(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Commit", arg0)
}

// Count mocks base method
func (_m *MockTransactionalManipulator) Count(_param0 *manipulate.Context, _param1 elemental.Identity) (int, error) {
	ret := _m.ctrl.Call(_m, "Count", _param0, _param1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count
func (_mr *MockTransactionalManipulatorMockRecorder) Count(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Count", arg0, arg1)
}

// Create mocks base method
func (_m *MockTransactionalManipulator) Create(_param0 *manipulate.Context, _param1 ...elemental.Identifiable) error {
	_s := []interface{}{_param0}
	for _, _x := range _param1 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Create", _s...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (_mr *MockTransactionalManipulatorMockRecorder) Create(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0}, arg1...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Create", _s...)
}

// Delete mocks base method
func (_m *MockTransactionalManipulator) Delete(_param0 *manipulate.Context, _param1 ...elemental.Identifiable) error {
	_s := []interface{}{_param0}
	for _, _x := range _param1 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Delete", _s...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (_mr *MockTransactionalManipulatorMockRecorder) Delete(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0}, arg1...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Delete", _s...)
}

// DeleteMany mocks base method
func (_m *MockTransactionalManipulator) DeleteMany(_param0 *manipulate.Context, _param1 elemental.Identity) error {
	ret := _m.ctrl.Call(_m, "DeleteMany", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMany indicates an expected call of DeleteMany
func (_mr *MockTransactionalManipulatorMockRecorder) DeleteMany(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteMany", arg0, arg1)
}

// Increment mocks base method
func (_m *MockTransactionalManipulator) Increment(_param0 *manipulate.Context, _param1 elemental.Identity, _param2 string, _param3 int) error {
	ret := _m.ctrl.Call(_m, "Increment", _param0, _param1, _param2, _param3)
	ret0, _ := ret[0].(error)
	return ret0
}

// Increment indicates an expected call of Increment
func (_mr *MockTransactionalManipulatorMockRecorder) Increment(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Increment", arg0, arg1, arg2, arg3)
}

// Retrieve mocks base method
func (_m *MockTransactionalManipulator) Retrieve(_param0 *manipulate.Context, _param1 ...elemental.Identifiable) error {
	_s := []interface{}{_param0}
	for _, _x := range _param1 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Retrieve", _s...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Retrieve indicates an expected call of Retrieve
func (_mr *MockTransactionalManipulatorMockRecorder) Retrieve(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0}, arg1...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Retrieve", _s...)
}

// RetrieveMany mocks base method
func (_m *MockTransactionalManipulator) RetrieveMany(_param0 *manipulate.Context, _param1 elemental.ContentIdentifiable) error {
	ret := _m.ctrl.Call(_m, "RetrieveMany", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RetrieveMany indicates an expected call of RetrieveMany
func (_mr *MockTransactionalManipulatorMockRecorder) RetrieveMany(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RetrieveMany", arg0, arg1)
}

// Update mocks base method
func (_m *MockTransactionalManipulator) Update(_param0 *manipulate.Context, _param1 ...elemental.Identifiable) error {
	_s := []interface{}{_param0}
	for _, _x := range _param1 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Update", _s...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (_mr *MockTransactionalManipulatorMockRecorder) Update(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0}, arg1...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Update", _s...)
}

// MockEventManipulator is a mock of EventManipulator interface
type MockEventManipulator struct {
	ctrl     *gomock.Controller
	recorder *MockEventManipulatorMockRecorder
}

// MockEventManipulatorMockRecorder is the mock recorder for MockEventManipulator
type MockEventManipulatorMockRecorder struct {
	mock *MockEventManipulator
}

// NewMockEventManipulator creates a new mock instance
func NewMockEventManipulator(ctrl *gomock.Controller) *MockEventManipulator {
	mock := &MockEventManipulator{ctrl: ctrl}
	mock.recorder = &MockEventManipulatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockEventManipulator) EXPECT() *MockEventManipulatorMockRecorder {
	return _m.recorder
}

// Count mocks base method
func (_m *MockEventManipulator) Count(_param0 *manipulate.Context, _param1 elemental.Identity) (int, error) {
	ret := _m.ctrl.Call(_m, "Count", _param0, _param1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count
func (_mr *MockEventManipulatorMockRecorder) Count(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Count", arg0, arg1)
}

// Create mocks base method
func (_m *MockEventManipulator) Create(_param0 *manipulate.Context, _param1 ...elemental.Identifiable) error {
	_s := []interface{}{_param0}
	for _, _x := range _param1 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Create", _s...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (_mr *MockEventManipulatorMockRecorder) Create(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0}, arg1...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Create", _s...)
}

// Delete mocks base method
func (_m *MockEventManipulator) Delete(_param0 *manipulate.Context, _param1 ...elemental.Identifiable) error {
	_s := []interface{}{_param0}
	for _, _x := range _param1 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Delete", _s...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (_mr *MockEventManipulatorMockRecorder) Delete(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0}, arg1...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Delete", _s...)
}

// DeleteMany mocks base method
func (_m *MockEventManipulator) DeleteMany(_param0 *manipulate.Context, _param1 elemental.Identity) error {
	ret := _m.ctrl.Call(_m, "DeleteMany", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMany indicates an expected call of DeleteMany
func (_mr *MockEventManipulatorMockRecorder) DeleteMany(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteMany", arg0, arg1)
}

// Increment mocks base method
func (_m *MockEventManipulator) Increment(_param0 *manipulate.Context, _param1 elemental.Identity, _param2 string, _param3 int) error {
	ret := _m.ctrl.Call(_m, "Increment", _param0, _param1, _param2, _param3)
	ret0, _ := ret[0].(error)
	return ret0
}

// Increment indicates an expected call of Increment
func (_mr *MockEventManipulatorMockRecorder) Increment(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Increment", arg0, arg1, arg2, arg3)
}

// Retrieve mocks base method
func (_m *MockEventManipulator) Retrieve(_param0 *manipulate.Context, _param1 ...elemental.Identifiable) error {
	_s := []interface{}{_param0}
	for _, _x := range _param1 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Retrieve", _s...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Retrieve indicates an expected call of Retrieve
func (_mr *MockEventManipulatorMockRecorder) Retrieve(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0}, arg1...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Retrieve", _s...)
}

// RetrieveMany mocks base method
func (_m *MockEventManipulator) RetrieveMany(_param0 *manipulate.Context, _param1 elemental.ContentIdentifiable) error {
	ret := _m.ctrl.Call(_m, "RetrieveMany", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RetrieveMany indicates an expected call of RetrieveMany
func (_mr *MockEventManipulatorMockRecorder) RetrieveMany(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RetrieveMany", arg0, arg1)
}

// Subscribe mocks base method
func (_m *MockEventManipulator) Subscribe(_param0 *elemental.PushFilter, _param1 bool, _param2 manipulate.EventHandler, _param3 manipulate.RecoveryHandler) (manipulate.EventUnsubscriber, manipulate.EventFilterUpdater, error) {
	ret := _m.ctrl.Call(_m, "Subscribe", _param0, _param1, _param2, _param3)
	ret0, _ := ret[0].(manipulate.EventUnsubscriber)
	ret1, _ := ret[1].(manipulate.EventFilterUpdater)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Subscribe indicates an expected call of Subscribe
func (_mr *MockEventManipulatorMockRecorder) Subscribe(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Subscribe", arg0, arg1, arg2, arg3)
}

// Update mocks base method
func (_m *MockEventManipulator) Update(_param0 *manipulate.Context, _param1 ...elemental.Identifiable) error {
	_s := []interface{}{_param0}
	for _, _x := range _param1 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Update", _s...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (_mr *MockEventManipulatorMockRecorder) Update(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0}, arg1...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Update", _s...)
}
